import { Component, Input, EventEmitter, Output, ChangeDetectionStrategy } from '@angular/core';
import { Color } from './../../../../helpers/color.class';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../../../directives/color-picker-input.directive";
export class HslaComponent {
    constructor() {
        this.hueChange = new EventEmitter(false);
        this.colorChange = new EventEmitter(false);
        this.isAlphaVisible = true;
    }
    set label(value) {
        this.labelVisible = true;
    }
    set alpha(isVisible) {
        this.isAlphaVisible = isVisible;
    }
    get value() {
        return this.color ? this.color.getHsla() : null;
    }
    onInputChange(newValue, color) {
        const value = this.value;
        const hue = color === 'H' ? newValue : value.hue;
        const saturation = color === 'S' ? newValue : value.saturation;
        const lightness = color === 'L' ? newValue : value.lightness;
        const alpha = color === 'A' ? newValue : value.alpha;
        const newColor = new Color().setHsla(hue, saturation, lightness, alpha);
        const hueColor = new Color().setHsva(newColor.getHsva().hue);
        this.hueChange.emit(hueColor);
        this.colorChange.emit(newColor);
    }
}
HslaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: HslaComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
HslaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.5", type: HslaComponent, selector: "hsla-input-component", inputs: { hue: "hue", color: "color", label: "label", alpha: "alpha" }, outputs: { hueChange: "hueChange", colorChange: "colorChange" }, ngImport: i0, template: "<div class=\"column\">\r\n    <input type=\"text\" pattern=\"[0-9]*\" min=\"0\" max=\"360\" [value]=\"value?.getHue().toString()\" (inputChange)=\"onInputChange($event, 'H')\" />\r\n    <span *ngIf=\"labelVisible\">H</span>\r\n</div>\r\n<div class=\"column\">\r\n    <input type=\"text\" pattern=\"[0-9]*\" min=\"0\" max=\"100\" [value]=\"value?.getSaturation() + '%'\" (inputChange)=\"onInputChange($event, 'S')\" />\r\n    <span *ngIf=\"labelVisible\">S</span>\r\n</div>\r\n<div class=\"column\">\r\n    <input type=\"text\" pattern=\"[0-9]*\" min=\"0\" max=\"100\" [value]=\"value?.getLightness() + '%'\" (inputChange)=\"onInputChange($event, 'L')\" />\r\n    <span *ngIf=\"labelVisible\">L</span>\r\n</div>\r\n<div class=\"column\" *ngIf=\"isAlphaVisible\">\r\n    <input type=\"text\" pattern=\"[0-9]+([\\.,][0-9]{1,2})?\" min=\"0\" max=\"1\" [value]=\"value?.getAlpha().toString()\" (inputChange)=\"onInputChange($event, 'A')\" />\r\n    <span *ngIf=\"labelVisible\">A</span>\r\n</div>", styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}\n", ":host{display:table;width:100%;text-align:center;color:#b4b4b4;font-size:11px}.column{display:table-cell;padding:0 2px}input{width:100%;border:1px solid rgb(218,218,218);color:#272727;text-align:center;font-size:12px;-webkit-appearance:none;border-radius:0;margin:0 0 6px;height:26px;outline:none}\n", ""], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.ColorPickerInputDirective, selector: "[inputChange]", inputs: ["min", "max"], outputs: ["inputChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: HslaComponent, decorators: [{
            type: Component,
            args: [{ selector: `hsla-input-component`, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"column\">\r\n    <input type=\"text\" pattern=\"[0-9]*\" min=\"0\" max=\"360\" [value]=\"value?.getHue().toString()\" (inputChange)=\"onInputChange($event, 'H')\" />\r\n    <span *ngIf=\"labelVisible\">H</span>\r\n</div>\r\n<div class=\"column\">\r\n    <input type=\"text\" pattern=\"[0-9]*\" min=\"0\" max=\"100\" [value]=\"value?.getSaturation() + '%'\" (inputChange)=\"onInputChange($event, 'S')\" />\r\n    <span *ngIf=\"labelVisible\">S</span>\r\n</div>\r\n<div class=\"column\">\r\n    <input type=\"text\" pattern=\"[0-9]*\" min=\"0\" max=\"100\" [value]=\"value?.getLightness() + '%'\" (inputChange)=\"onInputChange($event, 'L')\" />\r\n    <span *ngIf=\"labelVisible\">L</span>\r\n</div>\r\n<div class=\"column\" *ngIf=\"isAlphaVisible\">\r\n    <input type=\"text\" pattern=\"[0-9]+([\\.,][0-9]{1,2})?\" min=\"0\" max=\"1\" [value]=\"value?.getAlpha().toString()\" (inputChange)=\"onInputChange($event, 'A')\" />\r\n    <span *ngIf=\"labelVisible\">A</span>\r\n</div>", styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}\n", ":host{display:table;width:100%;text-align:center;color:#b4b4b4;font-size:11px}.column{display:table-cell;padding:0 2px}input{width:100%;border:1px solid rgb(218,218,218);color:#272727;text-align:center;font-size:12px;-webkit-appearance:none;border-radius:0;margin:0 0 6px;height:26px;outline:none}\n"] }]
        }], propDecorators: { hue: [{
                type: Input
            }], hueChange: [{
                type: Output
            }], color: [{
                type: Input
            }], colorChange: [{
                type: Output
            }], label: [{
                type: Input
            }], alpha: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHNsYS1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pcGxhYi9uZ3gtY29sb3ItcGlja2VyL3NyYy9saWIvY29tcG9uZW50cy9wYXJ0cy9pbnB1dHMvaHNsYS1pbnB1dC9oc2xhLWlucHV0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lwbGFiL25neC1jb2xvci1waWNrZXIvc3JjL2xpYi9jb21wb25lbnRzL3BhcnRzL2lucHV0cy9oc2xhLWlucHV0L2hzbGEtaW5wdXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7Ozs7QUFhMUQsTUFBTSxPQUFPLGFBQWE7SUFWMUI7UUFnQlcsY0FBUyxHQUFHLElBQUksWUFBWSxDQUFRLEtBQUssQ0FBQyxDQUFDO1FBTTNDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLENBQVEsS0FBSyxDQUFDLENBQUM7UUFTN0MsbUJBQWMsR0FBWSxJQUFJLENBQUM7S0F5QnpDO0lBOUJHLElBQ1csS0FBSyxDQUFDLEtBQUs7UUFDbEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7SUFDN0IsQ0FBQztJQUlELElBQ1csS0FBSyxDQUFDLFNBQWtCO1FBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsU0FBUyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxJQUFXLEtBQUs7UUFDWixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwRCxDQUFDO0lBRU0sYUFBYSxDQUFDLFFBQWdCLEVBQUUsS0FBNEI7UUFDL0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN6QixNQUFNLEdBQUcsR0FBRyxLQUFLLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDakQsTUFBTSxVQUFVLEdBQUcsS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQy9ELE1BQU0sU0FBUyxHQUFHLEtBQUssS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUM3RCxNQUFNLEtBQUssR0FBRyxLQUFLLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFHckQsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7OzBHQTdDUSxhQUFhOzhGQUFiLGFBQWEscU1DZDFCLGkrQkFlTTsyRkRETyxhQUFhO2tCQVZ6QixTQUFTOytCQUNJLHNCQUFzQixtQkFPZix1QkFBdUIsQ0FBQyxNQUFNOzhCQUt4QyxHQUFHO3NCQURULEtBQUs7Z0JBSUMsU0FBUztzQkFEZixNQUFNO2dCQUlBLEtBQUs7c0JBRFgsS0FBSztnQkFJQyxXQUFXO3NCQURqQixNQUFNO2dCQU1JLEtBQUs7c0JBRGYsS0FBSztnQkFRSyxLQUFLO3NCQURmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLy4uLy4uLy4uLy4uL2hlbHBlcnMvY29sb3IuY2xhc3MnO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IGBoc2xhLWlucHV0LWNvbXBvbmVudGAsXHJcbiAgICB0ZW1wbGF0ZVVybDogYC4vaHNsYS1pbnB1dC5jb21wb25lbnQuaHRtbGAsXHJcbiAgICBzdHlsZVVybHM6IFtcclxuICAgICAgICBgLi8uLi8uLi9iYXNlLnN0eWxlLnNjc3NgLFxyXG4gICAgICAgIGAuLy4uL2lucHV0LmNvbXBvbmVudC5zY3NzYCxcclxuICAgICAgICBgLi9oc2xhLWlucHV0LmNvbXBvbmVudC5zY3NzYFxyXG4gICAgXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIc2xhQ29tcG9uZW50IHtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIGh1ZTogQ29sb3I7XHJcblxyXG4gICAgQE91dHB1dCgpXHJcbiAgICBwdWJsaWMgaHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDb2xvcj4oZmFsc2UpO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgY29sb3I6IENvbG9yO1xyXG5cclxuICAgIEBPdXRwdXQoKVxyXG4gICAgcHVibGljIGNvbG9yQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxDb2xvcj4oZmFsc2UpO1xyXG5cclxuICAgIHB1YmxpYyBsYWJlbFZpc2libGU6IGJvb2xlYW47XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBzZXQgbGFiZWwodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmxhYmVsVmlzaWJsZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzQWxwaGFWaXNpYmxlOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIHNldCBhbHBoYShpc1Zpc2libGU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLmlzQWxwaGFWaXNpYmxlID0gaXNWaXNpYmxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3IgPyB0aGlzLmNvbG9yLmdldEhzbGEoKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uSW5wdXRDaGFuZ2UobmV3VmFsdWU6IG51bWJlciwgY29sb3I6ICdIJyB8ICdTJyB8ICdMJyB8ICdBJykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICBjb25zdCBodWUgPSBjb2xvciA9PT0gJ0gnID8gbmV3VmFsdWUgOiB2YWx1ZS5odWU7XHJcbiAgICAgICAgY29uc3Qgc2F0dXJhdGlvbiA9IGNvbG9yID09PSAnUycgPyBuZXdWYWx1ZSA6IHZhbHVlLnNhdHVyYXRpb247XHJcbiAgICAgICAgY29uc3QgbGlnaHRuZXNzID0gY29sb3IgPT09ICdMJyA/IG5ld1ZhbHVlIDogdmFsdWUubGlnaHRuZXNzO1xyXG4gICAgICAgIGNvbnN0IGFscGhhID0gY29sb3IgPT09ICdBJyA/IG5ld1ZhbHVlIDogdmFsdWUuYWxwaGE7XHJcblxyXG5cclxuICAgICAgICBjb25zdCBuZXdDb2xvciA9IG5ldyBDb2xvcigpLnNldEhzbGEoaHVlLCBzYXR1cmF0aW9uLCBsaWdodG5lc3MsIGFscGhhKTtcclxuICAgICAgICBjb25zdCBodWVDb2xvciA9IG5ldyBDb2xvcigpLnNldEhzdmEobmV3Q29sb3IuZ2V0SHN2YSgpLmh1ZSk7XHJcblxyXG4gICAgICAgIHRoaXMuaHVlQ2hhbmdlLmVtaXQoaHVlQ29sb3IpO1xyXG4gICAgICAgIHRoaXMuY29sb3JDaGFuZ2UuZW1pdChuZXdDb2xvcik7XHJcbiAgICB9XHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cImNvbHVtblwiPlxyXG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGF0dGVybj1cIlswLTldKlwiIG1pbj1cIjBcIiBtYXg9XCIzNjBcIiBbdmFsdWVdPVwidmFsdWU/LmdldEh1ZSgpLnRvU3RyaW5nKClcIiAoaW5wdXRDaGFuZ2UpPVwib25JbnB1dENoYW5nZSgkZXZlbnQsICdIJylcIiAvPlxyXG4gICAgPHNwYW4gKm5nSWY9XCJsYWJlbFZpc2libGVcIj5IPC9zcGFuPlxyXG48L2Rpdj5cclxuPGRpdiBjbGFzcz1cImNvbHVtblwiPlxyXG4gICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGF0dGVybj1cIlswLTldKlwiIG1pbj1cIjBcIiBtYXg9XCIxMDBcIiBbdmFsdWVdPVwidmFsdWU/LmdldFNhdHVyYXRpb24oKSArICclJ1wiIChpbnB1dENoYW5nZSk9XCJvbklucHV0Q2hhbmdlKCRldmVudCwgJ1MnKVwiIC8+XHJcbiAgICA8c3BhbiAqbmdJZj1cImxhYmVsVmlzaWJsZVwiPlM8L3NwYW4+XHJcbjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwiY29sdW1uXCI+XHJcbiAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwYXR0ZXJuPVwiWzAtOV0qXCIgbWluPVwiMFwiIG1heD1cIjEwMFwiIFt2YWx1ZV09XCJ2YWx1ZT8uZ2V0TGlnaHRuZXNzKCkgKyAnJSdcIiAoaW5wdXRDaGFuZ2UpPVwib25JbnB1dENoYW5nZSgkZXZlbnQsICdMJylcIiAvPlxyXG4gICAgPHNwYW4gKm5nSWY9XCJsYWJlbFZpc2libGVcIj5MPC9zcGFuPlxyXG48L2Rpdj5cclxuPGRpdiBjbGFzcz1cImNvbHVtblwiICpuZ0lmPVwiaXNBbHBoYVZpc2libGVcIj5cclxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBhdHRlcm49XCJbMC05XSsoW1xcLixdWzAtOV17MSwyfSk/XCIgbWluPVwiMFwiIG1heD1cIjFcIiBbdmFsdWVdPVwidmFsdWU/LmdldEFscGhhKCkudG9TdHJpbmcoKVwiIChpbnB1dENoYW5nZSk9XCJvbklucHV0Q2hhbmdlKCRldmVudCwgJ0EnKVwiIC8+XHJcbiAgICA8c3BhbiAqbmdJZj1cImxhYmVsVmlzaWJsZVwiPkE8L3NwYW4+XHJcbjwvZGl2PiJdfQ==