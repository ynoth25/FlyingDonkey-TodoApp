import { Component, Input, ChangeDetectionStrategy, Inject, Output, EventEmitter, HostBinding } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { OpacityAnimation, ListAnimation } from './color-preset-sublist.animation';
import { fromEvent, merge } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../color-preset/color-preset.component";
import * as i3 from "../../../pipes/reverse.pipe";
export class ColorPresetSublist {
    constructor(document, cdr) {
        this.document = document;
        this.cdr = cdr;
        this.selectionChange = new EventEmitter(false);
        this.direction = 'up';
        this.showChildren = false;
        this.subscriptions = [];
    }
    ngOnDestroy() {
        this.removeListeners();
        this.cdr.detach();
    }
    removeListeners() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.subscriptions.length = 0;
    }
    /**
     * emit color change
     */
    onSelectionChange(color) {
        this.selectionChange.next(color);
    }
    onLongPress() {
        this.showChildren = true;
        this.listenDocumentEvents();
    }
    listenDocumentEvents() {
        this.subscriptions.push(merge(fromEvent(this.document, 'mousedown'), fromEvent(this.document, 'touchstart', { passive: true }))
            .subscribe(() => this.closeList()));
    }
    closeList() {
        if (this.showChildren) {
            this.showChildren = false;
            this.cdr.markForCheck();
            this.removeListeners();
        }
    }
    get className() {
        return `direction-${this.direction}`;
    }
}
ColorPresetSublist.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: ColorPresetSublist, deps: [{ token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ColorPresetSublist.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.1.5", type: ColorPresetSublist, selector: "color-preset-sublist", inputs: { list: "list", direction: "direction", activeColor: "activeColor" }, outputs: { selectionChange: "selectionChange" }, host: { properties: { "className": "this.className" } }, ngImport: i0, template: "<color-preset [show-depth-title]=\"list.length > 1\" [color]=\"list[0]\" [activeColor]=\"activeColor\" (longPress)=\"onLongPress()\" (selectionChange)=\"onSelectionChange($event)\"></color-preset>\r\n<div class=\"reflection\" [style.backgroundColor]=\"list[0].toRgbaString()\"></div>\r\n<div class=\"reflection\" [style.backgroundColor]=\"list[0].toRgbaString()\"></div>\r\n\r\n<div class=\"sublist\" *ngIf=\"showChildren\" [@opacityAnimation]=\"showChildren\" [@listAnimation]=\"direction\">\r\n    <color-preset \r\n        *ngFor=\"let preset of list | reverse : (direction == 'up' || direction == 'right')\"\r\n        [color]=\"preset\"\r\n        [activeColor]=\"activeColor\"\r\n        (selectionChange)=\"onSelectionChange($event)\"></color-preset>\r\n</div>", styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}\n", ":host{position:relative;display:inline-block}color-preset{position:relative;z-index:3}.reflection{display:none;position:absolute;height:100%;width:100%;z-index:2;right:-2px;top:-2px;opacity:.5}.reflection+.reflection{opacity:.2;right:-4px;top:-4px;z-index:1}color-preset:hover+.reflection,color-preset:hover+.reflection+.reflection{display:block}.sublist{position:absolute;bottom:-8px;left:-8px;right:-8px;background:#fff;border-radius:2px;box-shadow:#0000004d 0 0 2px,#0000004d 0 2px 4px;padding:8px 5px;text-align:center;z-index:1000}.sublist color-preset{margin:8px 0 0}.sublist color-preset:first-child{margin:0}:host(.direction-down) .sublist{bottom:auto;top:-8px}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.ColorPresetComponent, selector: "color-preset", inputs: ["activeColor", "color", "show-depth-title"], outputs: ["selectionChange", "longPress"] }, { kind: "pipe", type: i3.ReversePipe, name: "reverse" }], animations: [OpacityAnimation, ListAnimation], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.1.5", ngImport: i0, type: ColorPresetSublist, decorators: [{
            type: Component,
            args: [{ selector: `color-preset-sublist`, changeDetection: ChangeDetectionStrategy.OnPush, animations: [OpacityAnimation, ListAnimation], template: "<color-preset [show-depth-title]=\"list.length > 1\" [color]=\"list[0]\" [activeColor]=\"activeColor\" (longPress)=\"onLongPress()\" (selectionChange)=\"onSelectionChange($event)\"></color-preset>\r\n<div class=\"reflection\" [style.backgroundColor]=\"list[0].toRgbaString()\"></div>\r\n<div class=\"reflection\" [style.backgroundColor]=\"list[0].toRgbaString()\"></div>\r\n\r\n<div class=\"sublist\" *ngIf=\"showChildren\" [@opacityAnimation]=\"showChildren\" [@listAnimation]=\"direction\">\r\n    <color-preset \r\n        *ngFor=\"let preset of list | reverse : (direction == 'up' || direction == 'right')\"\r\n        [color]=\"preset\"\r\n        [activeColor]=\"activeColor\"\r\n        (selectionChange)=\"onSelectionChange($event)\"></color-preset>\r\n</div>", styles: [":host,:host ::ng-deep *{padding:0;margin:0;box-sizing:border-box}\n", ":host{position:relative;display:inline-block}color-preset{position:relative;z-index:3}.reflection{display:none;position:absolute;height:100%;width:100%;z-index:2;right:-2px;top:-2px;opacity:.5}.reflection+.reflection{opacity:.2;right:-4px;top:-4px;z-index:1}color-preset:hover+.reflection,color-preset:hover+.reflection+.reflection{display:block}.sublist{position:absolute;bottom:-8px;left:-8px;right:-8px;background:#fff;border-radius:2px;box-shadow:#0000004d 0 0 2px,#0000004d 0 2px 4px;padding:8px 5px;text-align:center;z-index:1000}.sublist color-preset{margin:8px 0 0}.sublist color-preset:first-child{margin:0}:host(.direction-down) .sublist{bottom:auto;top:-8px}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { list: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }], direction: [{
                type: Input
            }], activeColor: [{
                type: Input
            }], className: [{
                type: HostBinding,
                args: ['className']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcHJlc2V0LXN1Ymxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXBsYWIvbmd4LWNvbG9yLXBpY2tlci9zcmMvbGliL2NvbXBvbmVudHMvcGFydHMvY29sb3ItcHJlc2V0LXN1Ymxpc3QvY29sb3ItcHJlc2V0LXN1Ymxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaXBsYWIvbmd4LWNvbG9yLXBpY2tlci9zcmMvbGliL2NvbXBvbmVudHMvcGFydHMvY29sb3ItcHJlc2V0LXN1Ymxpc3QvY29sb3ItcHJlc2V0LXN1Ymxpc3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxLQUFLLEVBQ0wsdUJBQXVCLEVBQ3ZCLE1BQU0sRUFHTixNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFnQixNQUFNLE1BQU0sQ0FBQzs7Ozs7QUFZdEQsTUFBTSxPQUFPLGtCQUFrQjtJQWtCM0IsWUFDdUMsUUFBUSxFQUMxQixHQUFzQjtRQURKLGFBQVEsR0FBUixRQUFRLENBQUE7UUFDMUIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFkcEMsb0JBQWUsR0FBRyxJQUFJLFlBQVksQ0FBUSxLQUFLLENBQUMsQ0FBQztRQUdqRCxjQUFTLEdBQXFDLElBQUksQ0FBQztRQUtuRCxpQkFBWSxHQUFZLEtBQUssQ0FBQztRQUU3QixrQkFBYSxHQUFtQixFQUFFLENBQUM7SUFLM0MsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sZUFBZTtRQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNJLGlCQUFpQixDQUFDLEtBQVk7UUFDakMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRU8sb0JBQW9CO1FBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNuQixLQUFLLENBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLEVBQ3JDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUM1RDthQUNBLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FDckMsQ0FBQztJQUNOLENBQUM7SUFFTyxTQUFTO1FBQ2IsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1lBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQzFCO0lBQ0wsQ0FBQztJQUVELElBQ1csU0FBUztRQUNoQixPQUFPLGFBQWEsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3pDLENBQUM7OytHQWxFUSxrQkFBa0Isa0JBbUJmLFFBQVE7bUdBbkJYLGtCQUFrQixvUEMxQi9CLGl3QkFVTSw2dENEY1UsQ0FBQyxnQkFBZ0IsRUFBRSxhQUFhLENBQUM7MkZBRXBDLGtCQUFrQjtrQkFWOUIsU0FBUzsrQkFDSSxzQkFBc0IsbUJBTWYsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxDQUFDLGdCQUFnQixFQUFFLGFBQWEsQ0FBQzs7MEJBcUJ4QyxNQUFNOzJCQUFDLFFBQVE7NEVBaEJiLElBQUk7c0JBRFYsS0FBSztnQkFJQyxlQUFlO3NCQURyQixNQUFNO2dCQUlBLFNBQVM7c0JBRGYsS0FBSztnQkFJQyxXQUFXO3NCQURqQixLQUFLO2dCQXFESyxTQUFTO3NCQURuQixXQUFXO3VCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgSW5wdXQsXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIEluamVjdCxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgT3V0cHV0LFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgSG9zdEJpbmRpbmdcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vLi4vLi4vLi4vaGVscGVycy9jb2xvci5jbGFzcyc7XHJcbmltcG9ydCB7IE9wYWNpdHlBbmltYXRpb24sIExpc3RBbmltYXRpb24gfSBmcm9tICcuL2NvbG9yLXByZXNldC1zdWJsaXN0LmFuaW1hdGlvbic7XHJcbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogYGNvbG9yLXByZXNldC1zdWJsaXN0YCxcclxuICAgIHRlbXBsYXRlVXJsOiBgLi9jb2xvci1wcmVzZXQtc3VibGlzdC5jb21wb25lbnQuaHRtbGAsXHJcbiAgICBzdHlsZVVybHM6IFtcclxuICAgICAgICBgLi8uLi9iYXNlLnN0eWxlLnNjc3NgLFxyXG4gICAgICAgIGAuL2NvbG9yLXByZXNldC1zdWJsaXN0LmNvbXBvbmVudC5zY3NzYFxyXG4gICAgXSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gICAgYW5pbWF0aW9uczogW09wYWNpdHlBbmltYXRpb24sIExpc3RBbmltYXRpb25dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb2xvclByZXNldFN1Ymxpc3QgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgbGlzdDogQXJyYXk8Q29sb3I+O1xyXG5cclxuICAgIEBPdXRwdXQoKVxyXG4gICAgcHVibGljIHNlbGVjdGlvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Q29sb3I+KGZhbHNlKTtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgcHVibGljIGRpcmVjdGlvbjogJ2Rvd24nIHwgJ3VwJyB8ICdsZWZ0JyB8ICdyaWdodCcgPSAndXAnO1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBwdWJsaWMgYWN0aXZlQ29sb3I6IENvbG9yO1xyXG5cclxuICAgIHB1YmxpYyBzaG93Q2hpbGRyZW46IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSByZWFkb25seSBkb2N1bWVudCxcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLmNkci5kZXRhY2goKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbW92ZUxpc3RlbmVycygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoc3Vic2NyaXB0aW9uKSA9PiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKSk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBlbWl0IGNvbG9yIGNoYW5nZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb25TZWxlY3Rpb25DaGFuZ2UoY29sb3I6IENvbG9yKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UubmV4dChjb2xvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uTG9uZ1ByZXNzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2hvd0NoaWxkcmVuID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmxpc3RlbkRvY3VtZW50RXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBsaXN0ZW5Eb2N1bWVudEV2ZW50cygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcclxuICAgICAgICAgICAgbWVyZ2UoXHJcbiAgICAgICAgICAgICAgICBmcm9tRXZlbnQodGhpcy5kb2N1bWVudCwgJ21vdXNlZG93bicpLFxyXG4gICAgICAgICAgICAgICAgZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQsICd0b3VjaHN0YXJ0JywgeyBwYXNzaXZlOiB0cnVlIH0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLmNsb3NlTGlzdCgpKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjbG9zZUxpc3QoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0NoaWxkcmVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzTmFtZScpXHJcbiAgICBwdWJsaWMgZ2V0IGNsYXNzTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgZGlyZWN0aW9uLSR7dGhpcy5kaXJlY3Rpb259YDtcclxuICAgIH1cclxufSIsIjxjb2xvci1wcmVzZXQgW3Nob3ctZGVwdGgtdGl0bGVdPVwibGlzdC5sZW5ndGggPiAxXCIgW2NvbG9yXT1cImxpc3RbMF1cIiBbYWN0aXZlQ29sb3JdPVwiYWN0aXZlQ29sb3JcIiAobG9uZ1ByZXNzKT1cIm9uTG9uZ1ByZXNzKClcIiAoc2VsZWN0aW9uQ2hhbmdlKT1cIm9uU2VsZWN0aW9uQ2hhbmdlKCRldmVudClcIj48L2NvbG9yLXByZXNldD5cclxuPGRpdiBjbGFzcz1cInJlZmxlY3Rpb25cIiBbc3R5bGUuYmFja2dyb3VuZENvbG9yXT1cImxpc3RbMF0udG9SZ2JhU3RyaW5nKClcIj48L2Rpdj5cclxuPGRpdiBjbGFzcz1cInJlZmxlY3Rpb25cIiBbc3R5bGUuYmFja2dyb3VuZENvbG9yXT1cImxpc3RbMF0udG9SZ2JhU3RyaW5nKClcIj48L2Rpdj5cclxuXHJcbjxkaXYgY2xhc3M9XCJzdWJsaXN0XCIgKm5nSWY9XCJzaG93Q2hpbGRyZW5cIiBbQG9wYWNpdHlBbmltYXRpb25dPVwic2hvd0NoaWxkcmVuXCIgW0BsaXN0QW5pbWF0aW9uXT1cImRpcmVjdGlvblwiPlxyXG4gICAgPGNvbG9yLXByZXNldCBcclxuICAgICAgICAqbmdGb3I9XCJsZXQgcHJlc2V0IG9mIGxpc3QgfCByZXZlcnNlIDogKGRpcmVjdGlvbiA9PSAndXAnIHx8IGRpcmVjdGlvbiA9PSAncmlnaHQnKVwiXHJcbiAgICAgICAgW2NvbG9yXT1cInByZXNldFwiXHJcbiAgICAgICAgW2FjdGl2ZUNvbG9yXT1cImFjdGl2ZUNvbG9yXCJcclxuICAgICAgICAoc2VsZWN0aW9uQ2hhbmdlKT1cIm9uU2VsZWN0aW9uQ2hhbmdlKCRldmVudClcIj48L2NvbG9yLXByZXNldD5cclxuPC9kaXY+Il19